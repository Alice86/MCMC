{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stat 202C - Project 3\n",
    "\n",
    "**Jiayu Wu | 905054229**\n",
    "\n",
    "### Sufficient statistics\n",
    "\n",
    "To alleviate the effect of randomness, we run gibbs sampler as in Project2 for 10 times and compute the average:\n",
    "\n",
    "$\\beta$|$0.65$ | $0.75$ | $0.85$\n",
    "-|- | - | - \n",
    "mean| $0.29717$ | $0.25105$ | $0.18252$\n",
    "\n",
    "*Iterations are count in sweep in the following results*\n",
    "\n",
    "### 1, 2.\n",
    "$\\beta$|$0.65$ | $0.75$ | $0.85$\n",
    "- |- | - | - \n",
    "**Version 1**|- | - | - \n",
    "Convergence Plot|<img src=\"1-1(0.65).png\" width=\"260\" height=\"260\" align=\"center\"/> | <img src=\"1-1(0.75).png\" width=\"260\" height=\"260\"> | <img src=\"1-1(0.85).png\" width=\"260\" height=\"260\" align=\"center\"/>\n",
    "MC1 Convergence Time ($\\epsilon=0.005$)| 5 | 8 | 6\n",
    "MC2 Convergence Time ($\\epsilon=0.005$)| 4 | 8 | 11\n",
    "$h^*$ | 0.297 | 0.251 | 0.183\n",
    "Coalescence Time| 5 | 13 | 11\n",
    "Coalescence $H(x)$| 0.293 | 0.249 | 0.187\n",
    "- |- | - | - \n",
    "**Version 2**|- | - | - \n",
    "Convergence Plot|<img src=\"2-1(0.65).png\" width=\"260\" height=\"260\" align=\"center\"/> | <img src=\"2-1(0.75).png\" width=\"260\" height=\"260\"> | <img src=\"2-1(0.85).png\" width=\"260\" height=\"260\" align=\"center\"/>\n",
    "MC1 Convergence Time ($\\epsilon=0.005$)| 3 | 6 | 4\n",
    "MC2 Convergence Time ($\\epsilon=0.005$)| 5 | 5 | 17\n",
    "Coalescence Time| 6 | 11 | 14\n",
    "Coalescence $H(x)$| 0.300 | 0.251 | 0.194\n",
    "\n",
    "\n",
    "### 3.\n",
    "$\\beta$|$0.65$ | $0.75$ | $0.85$\n",
    "- |- | - | - \n",
    "**Version 1**|- | - | - \n",
    "Avg. Size Plot|<img src=\"1-3(0.65).png\" width=\"260\" height=\"260\" align=\"center\"/> | <img src=\"1-3(0.75).png\" width=\"260\" height=\"260\"> | <img src=\"1-3(0.85).png\" width=\"260\" height=\"260\" align=\"center\"/>\n",
    "- |- | - | - \n",
    "**Version 2**|- | - | - \n",
    "Avg. Size Plot|<img src=\"2-3(0.65).png\" width=\"260\" height=\"260\" align=\"center\"/> | <img src=\"2-3(0.75).png\" width=\"260\" height=\"260\"> | <img src=\"2-3(0.85).png\" width=\"260\" height=\"260\" align=\"center\"/>\n",
    "\n",
    "\n",
    "### 4. \n",
    "$\\beta=1.0$|Version 1 | Version 2\n",
    "-|- | - | - \n",
    "Convergence Plot|<img src=\"1-1(1.00).png\" width=\"260\" height=\"260\" align=\"center\"/> | <img src=\"2-1(1.00).png\" width=\"260\" height=\"260\">\n",
    "Convergence Time| 14 | 19\n",
    "Convergence $H(X)$| 0.077 | 0.079  \n",
    "Avg. Size Plot|<img src=\"1-3(1.00).png\" width=\"260\" height=\"260\" align=\"center\"/> | <img src=\"2-3(1.00).png\" width=\"260\" height=\"260\"> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def margin(x, y, mat, beta):\n",
    "    one = 0\n",
    "    zero = 0\n",
    "    if x > 0:\n",
    "        one += mat[x-1, y]\n",
    "        zero += 1 - mat[x-1, y]\n",
    "    if x < n-1:\n",
    "        one += mat[x+1, y]\n",
    "        zero += 1 - mat[x+1, y]\n",
    "    if y > 0:\n",
    "        one += mat[x, y-1]\n",
    "        zero += 1 - mat[x, y-1]\n",
    "    if y < n-1:\n",
    "        one += mat[x, y+1]\n",
    "        zero += 1 - mat[x, y+1]\n",
    "    c = np.exp(beta*one)\n",
    "    prob = c/(c+np.exp(beta*zero))\n",
    "    return prob\n",
    "def swp(white, black, beta):\n",
    "    for x in range(n):\n",
    "        for y in range(n):\n",
    "            rdn = np.random.uniform(0,1)\n",
    "            if rdn < margin(x, y, white, beta):\n",
    "                white[x, y] = 1\n",
    "            else: \n",
    "                white[x, y] = 0\n",
    "            if rdn < margin(x, y, black, beta):\n",
    "                black[x, y] = 1\n",
    "            else:\n",
    "                black[x, y] = 0\n",
    "def suff_stat(img):\n",
    "    n = img.shape[0]\n",
    "    S = sum(sum(img[1:,:]-img[:(n-1),:]!=0))+sum(sum(img[:,1:]-img[:,:(n-1)]!=0)) \n",
    "    return S/2/n**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 64\n",
    "betas = [0.65, 0.75, 0.85]\n",
    "#tau = [[], [], []]\n",
    "#Hs = [[], [], []]\n",
    "# cdict = np.linspace(0,1,num=8)\n",
    "for i in range(20):\n",
    "    for b in range(3):\n",
    "        beta = betas[b]\n",
    "        wh = []\n",
    "        bl = []\n",
    "        white = np.ones((n,n), dtype=int)\n",
    "        black = np.zeros((n,n), dtype=int) \n",
    "        ww, bb = np.sum(white),np.sum(black)\n",
    "        while ww != bb:\n",
    "            swp(white, black, beta)      \n",
    "            ww, bb = np.sum(white),np.sum(black)\n",
    "            wh.append(ww)\n",
    "            bl.append(bb)\n",
    "        # plt.imshow(white, cmap='gray')\n",
    "        tau[b].append(len(wh))\n",
    "        # sufficient statistics\n",
    "        H = suff_stat(white)\n",
    "        Hs[b].append(H)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(tau, Hs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "means = [np.mean(x) for x in Hs]\n",
    "means.append(-1)\n",
    "taus = [np.mean(x) for x in tau]\n",
    "print(means,taus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cluster gibbs 1\n",
    "def cluster_flip(img, beta):\n",
    "    q = 1-np.exp(-beta)\n",
    "    # clustering\n",
    "    gid = 0\n",
    "    cluster = np.zeros((n,n), dtype=int)\n",
    "    for x in range(n):\n",
    "        for y in range(n):\n",
    "            if cluster[x,y]==0:\n",
    "                gid += 1\n",
    "                mark = np.copy(img[x,y])\n",
    "                if np.random.randint(2)==1: \n",
    "                    f = 1-mark\n",
    "                else:\n",
    "                    f = mark\n",
    "                tree = [[x, y]]\n",
    "                cluster[x,y] = 1\n",
    "                i = 0\n",
    "                while i < len(tree):\n",
    "                    node = tree[i]\n",
    "                    i += 1\n",
    "                    # flip\n",
    "                    x, y = node[0], node[1]\n",
    "                    img[x, y] = f                    \n",
    "                    # grow\n",
    "                    pos = [[x+1, y],[x-1,y],[x,y+1],[x,y-1]]\n",
    "                    for p in pos:\n",
    "                        if p[0]>=0 and p[0]<n and p[1]>=0 and p[1]<n: \n",
    "                            if cluster[p[0], p[1]]==0:\n",
    "                                if mark==img[p[0], p[1]] and np.random.uniform(0,1) <= q:\n",
    "                                        tree.append(p)\n",
    "                                        cluster[p[0], p[1]] = 1\n",
    "    return img, gid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cluster initialization\n",
    "n = 64\n",
    "const = np.ones((n,n), dtype=int)\n",
    "a=np.tile([0,1],int(n/2))\n",
    "b=np.tile([1,0],int(n/2))\n",
    "checker = np.tile([a,b], [int(n/2),1]).astype(int)\n",
    "betas = [0.65, 0.75, 0.85, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cts, cts1, cts2 = [], [], []\n",
    "for b in range(4):\n",
    "    beta = betas[b]\n",
    "    C1 = np.copy(const)\n",
    "    C2 = np.copy(checker)\n",
    "    s1 = [suff_stat(C1)]\n",
    "    s2 = [suff_stat(C2)]\n",
    "    size = n**2\n",
    "    sizes1, sizes2 = [], []\n",
    "    for t in range(20):\n",
    "        C1, gid = cluster_flip(C1, beta)\n",
    "        sizes1.append(size/gid)\n",
    "        C2, gid = cluster_flip(C2, beta)\n",
    "        sizes2.append(size/gid)\n",
    "        stat1 = suff_stat(C1)\n",
    "        stat2 = suff_stat(C2)\n",
    "        s1.append(suff_stat(C1))\n",
    "        s2.append(suff_stat(C2))\n",
    "    for i in range(20):\n",
    "        if abs(s1[i]-means[b])<5e-3:\n",
    "            cts1.append([i,s1[i]])\n",
    "        if abs(s2[i]-means[b])<5e-3:\n",
    "            cts2.append([i,s2[i]])\n",
    "        if abs(s1[i]-s2[i])<5e-3:\n",
    "            cts.append([i,s1[i]])\n",
    "            break\n",
    "    plt.close()\n",
    "    plt.title(\"Version 1: Average cluster size: beta=%.2f\"%beta)\n",
    "    plt.xlabel('iteration')\n",
    "    plt.ylabel('avg. size')\n",
    "    plt.plot(sizes1, label='constant')\n",
    "    plt.plot(sizes2, label='checkerboard')\n",
    "    plt.legend()\n",
    "    plt.savefig(\"1-3(%.2f).png\"%beta)\n",
    "    plt.close()\n",
    "    plt.title(\"Version 1: Convergence plot: beta=%.2f\"%beta)\n",
    "    plt.xlabel('iteration')\n",
    "    plt.ylabel('Sufficient Statistic')\n",
    "    plt.plot(s1, label='constant')\n",
    "    plt.plot(s2, label='checkerboard')\n",
    "    plt.ylim(0,1)\n",
    "    plt.plot(list(range(20)), np.repeat(means[b],20), c='k', linewidth=0.5)\n",
    "    plt.legend()\n",
    "    plt.savefig(\"1-1(%.2f).png\"%beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cts1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cts2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def grow_flip(img, beta):\n",
    "    n = img.shape[0]\n",
    "    q = 1-np.exp(-beta)\n",
    "    x, y = np.random.randint(n), np.random.randint(n)\n",
    "    tree = [[x, y]]\n",
    "    i = 0\n",
    "    while i < len(tree):\n",
    "        node = tree[i]\n",
    "        i += 1\n",
    "        # flip\n",
    "        x, y = node[0], node[1]\n",
    "        f = 1-img[x, y]\n",
    "        img[x, y] = f\n",
    "        # grow\n",
    "        pos = [[x+1, y],[x-1,y],[x,y+1],[x,y-1]]\n",
    "        for p in pos:\n",
    "            if p not in tree and p[0]>=0 and p[0]<n and p[1]>=0 and p[1]<n: \n",
    "                if img[x,y]!=img[p[0], p[1]] and np.random.uniform(0,1) <= q:\n",
    "                        tree.append(p)\n",
    "    count = len(tree)\n",
    "    return img, count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "const = np.ones((n,n), dtype=int)\n",
    "a=np.tile([0,1],int(n/2))\n",
    "b=np.tile([1,0],int(n/2))\n",
    "checker = np.tile([a,b], [int(n/2),1]).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cts, cts1, cts2 = [], [], []\n",
    "for b in range(3,4):\n",
    "    beta = betas[b]\n",
    "    C1 = np.copy(const)\n",
    "    C2 = np.copy(checker)\n",
    "    s1 = [suff_stat(C1)]\n",
    "    s2 = [suff_stat(C2)]\n",
    "    size = n**2\n",
    "    sz1, sz2 = [], []\n",
    "    count1, count2 = 0, 0\n",
    "    itr1, itr2 = 0, 0\n",
    "    i1, i2 = 1, 1\n",
    "    for t in range(1000):\n",
    "        C1, count = grow_flip(C1, beta)\n",
    "        count1 += count\n",
    "        if count1 > i1*size:\n",
    "            i1 += 1\n",
    "            stat1 = suff_stat(C1)\n",
    "            s1.append(suff_stat(C1))\n",
    "            sz1.append(size/(t-itr1))\n",
    "            itr1 = t\n",
    "        C2, count = grow_flip(C2, beta)\n",
    "        count2 += count\n",
    "        if count2 > i2*size:\n",
    "            i2 += 1\n",
    "            stat2 = suff_stat(C2)\n",
    "            s2.append(suff_stat(C2))\n",
    "            sz2.append(size/(t-itr2))\n",
    "            itr2 = t\n",
    "    print(len(s1), len(s2))\n",
    "    for i in range(20):\n",
    "        if abs(s1[i]-means[b])<5e-3:\n",
    "            cts1.append([i,s1[i]])\n",
    "        if abs(s2[i]-means[b])<5e-3:\n",
    "            cts2.append([i,s2[i]])\n",
    "        if abs(s1[i]-s2[i])<5e-3:\n",
    "            cts.append([i,s1[i]])\n",
    "    plt.close()\n",
    "    plt.title(\"Version 2: Average cluster size: beta=%.2f\"%beta)\n",
    "    plt.xlabel('iteration')\n",
    "    plt.ylabel('avg. size')\n",
    "    plt.plot(sz1[:25], label='constant')\n",
    "    plt.plot(sz2[:25], label='checkerboard')\n",
    "    plt.legend()\n",
    "    plt.savefig(\"2-3(%.2f).png\"%beta)\n",
    "    plt.close()\n",
    "    plt.title(\"Version 2: Convergence plot: beta=%.2f\"%beta)\n",
    "    plt.xlabel('iteration')\n",
    "    plt.ylabel('Sufficient Statistic')\n",
    "    plt.plot(s1[:25], label='constant image')\n",
    "    plt.plot(s2[:25], label='checkerboard image')\n",
    "    plt.ylim(0,1)\n",
    "    plt.plot(list(range(25)), np.repeat(means[b],25), c='k', linewidth=0.5)\n",
    "    plt.legend()\n",
    "    plt.savefig(\"2-1(%.2f).png\"%beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cts1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(cts2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
